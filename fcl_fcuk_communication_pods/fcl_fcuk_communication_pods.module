<?php

/**
 * @file
 * Provides Communication Pods.
 *
 * Communication Pods are small chunks of simple content which can be injected
 * into locations on web pages.
 *
 * For example, we can inject a pod into search results, or we can add a
 * Communication Pod ribbon into a UK Page node, and when the paragraph is
 * rendered this module will provide a Communication Pod for the slot.
 *
 * You can think of Communication Pods a bit like Google Adsense adverts; this
 * module provides a dashboard where you can create and edit Communication
 * Pods, and say where they should appear.
 */

/**
 * Includes.
 */
module_load_include('inc', 'fcl_uk_utilities', 'fcl_uk_utilities.autoloader');
fcl_uk_utilities_autoload_includes('fcl_fcuk_communication_pods');

/**
 * Implements hook_permission().
 */
function fcl_fcuk_communication_pods_permission() {
  return [
    // Permission to access communication pods admin overview.
    COMMUNICATION_POD_PERM_ADMIN_OVERVIEW => [
      'title' => t(drupal_ucfirst(COMMUNICATION_POD_PERM_ADMIN_OVERVIEW)),
      'description' => t(''),
      'restrict access' => FALSE,
    ],
    // Permission to create communication pods.
    COMMUNICATION_POD_PERM_CREATE => [
      'title' => t(drupal_ucfirst(COMMUNICATION_POD_PERM_CREATE)),
      'description' => t(''),
      'restrict access' => FALSE,
    ],
    // Permission to edit own communication pods.
    COMMUNICATION_POD_PERM_EDIT_OWN => [
      'title' => t(drupal_ucfirst(COMMUNICATION_POD_PERM_EDIT_OWN)),
      'description' => t(''),
      'restrict access' => FALSE,
    ],
    // Permission to edit any communication pod.
    COMMUNICATION_POD_PERM_EDIT_ANY => [
      'title' => t(drupal_ucfirst(COMMUNICATION_POD_PERM_EDIT_ANY)),
      'description' => t(''),
      'restrict access' => FALSE,
    ],
    // Permission to delete own communication pods.
    COMMUNICATION_POD_PERM_DELETE_OWN => [
      'title' => t(drupal_ucfirst(COMMUNICATION_POD_PERM_DELETE_OWN)),
      'description' => t(''),
      'restrict access' => FALSE,
    ],
    // Permission to delete any communication pod.
    COMMUNICATION_POD_PERM_DELETE_ANY => [
      'title' => t(drupal_ucfirst(COMMUNICATION_POD_PERM_DELETE_ANY)),
      'description' => t(''),
      'restrict access' => FALSE,
    ],
    // Special permission to edit custom javascript (trusted roles only).
    COMMUNICATION_POD_PERM_EDIT_JS => [
      'title' => t(drupal_ucfirst(COMMUNICATION_POD_PERM_EDIT_JS)),
      'description' => t(''),
      'restrict access' => FALSE,
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function fcl_fcuk_communication_pods_menu() {
  return [
    // Path at which a Communication Pod can be viewed.
    COMMUNICATION_POD_ENTITY_PATH_SLUG . '/%fcl_fcuk_communication_pods' => [
      'title callback' => 'fcl_fcuk_communication_pods_title_callback',
      'title arguments' => [COMMUNICATION_POD_ACTION_READ, 1],
      'description' => 'View a Communication Pod.',
      'page callback' => 'fcl_fcuk_communication_pods_view_pod',
      'page arguments' => [1],
      'type' => MENU_CALLBACK,
      'access callback' => 'fcl_fcuk_communication_pods_access',
      'access arguments' => [COMMUNICATION_POD_ACTION_READ, 1],
    ],

    // The admin overview page.
    COMMUNICATION_POD_ADMIN_URL => [
      'title' => 'Communication Pods',
      'description' => 'An overview page which lists all Communication Pods on the site.',
      'page callback' => 'fcl_fcuk_communication_pods_admin_page',
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => [COMMUNICATION_POD_PERM_ADMIN_OVERVIEW],
    ],

    // The overview page.
    COMMUNICATION_POD_ADMIN_URL . '/overview-page' => [
      'title' => 'Overview',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -9,
    ],

    // The preview page which shows all communication pods.
    COMMUNICATION_POD_ADMIN_URL . '/preview' => [
      'title' => 'Preview',
      'description' => 'Displays a demo of each Communication Pod with their configuration settings.',
      'page callback' => 'fcl_fcuk_communication_pods_test_page',
      'type' => MENU_LOCAL_TASK,
      'access arguments' => [COMMUNICATION_POD_PERM_ADMIN_OVERVIEW],
      'weight' => -8,
    ],

    // A page where you can enter a path and see which Communication Pods will
    // display on that page.
    // @todo: this don't exist yet, captain. And we need more power.
    COMMUNICATION_POD_ADMIN_URL . '/url-checker' => [
      'title' => 'URL checker',
      'description' => 'On this page, you can enter a path and see which Communication Pods will display at that path.',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['fcl_fcuk_communication_pods_url_checker'],
      'type' => MENU_LOCAL_TASK,
      'access arguments' => [COMMUNICATION_POD_PERM_ADMIN_OVERVIEW],
      'weight' => -7,
    ],

    // A form to create a pod.
    COMMUNICATION_POD_ADMIN_URL . '/' . COMMUNICATION_POD_ACTION_CREATE => [
      'title' => 'Create Pod',
      'description' => 'Create a custom Communication Pod by uploading the HTML, styles and any javascript.',
      'page callback' => 'fcl_fcuk_communication_pods_edit_pod_callback',
      'page arguments' => [4],
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'fcl_fcuk_communication_pods_access',
      'access arguments' => [COMMUNICATION_POD_ACTION_CREATE],
      'weight' => -6,
    ],

    // The edit page for a pod.
    COMMUNICATION_POD_ADMIN_URL . '/' . COMMUNICATION_POD_ACTION_UPDATE . '/%fcl_fcuk_communication_pods' => [
      'title callback' => 'fcl_fcuk_communication_pods_title_callback',
      'title arguments' => [COMMUNICATION_POD_ACTION_UPDATE, 4],
      'description' => 'Edit an existing Communication Pod.',
      'page callback' => 'fcl_fcuk_communication_pods_edit_pod_callback',
      'page arguments' => [4],
      'type' => MENU_CALLBACK,
      'access callback' => 'fcl_fcuk_communication_pods_access',
      'access arguments' => [COMMUNICATION_POD_ACTION_UPDATE, 4],
    ],

    // The delete/revert page for a pod.
    COMMUNICATION_POD_ADMIN_URL . '/' . COMMUNICATION_POD_ACTION_DELETE . '/%fcl_fcuk_communication_pods' => [
      'title callback' => 'fcl_fcuk_communication_pods_title_callback',
      'title arguments' => [COMMUNICATION_POD_ACTION_DELETE, 4],
      'description' => 'Delete or revert an existing Communication Pod.',
      'page callback' => 'fcl_fcuk_communication_pods_delete_pod_callback',
      'page arguments' => [4],
      'type' => MENU_CALLBACK,
      'access callback' => 'fcl_fcuk_communication_pods_access',
      'access arguments' => [COMMUNICATION_POD_ACTION_DELETE, 4],
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function fcl_fcuk_communication_pods_theme($existing, $type, $theme, $path) {
  return [
    COMMUNICATION_POD_THEME_FUNCTION => [
      'variables' => [COMMUNICATION_POD_MACHINE_NAME => NULL],
      'render element' => 'element',
      'path' => drupal_get_path('module', 'fcl_fcuk_communication_pods') . '/templates',
      'template' => 'communication-pod',
      'preprocess functions' => ['fcl_fcuk_communication_pods_preprocess_pod'],
    ],
  ];
}

/**
 * Implements hook_fcl_fcuk_communication_pods_load_multiple_alter().
 *
 * @param array $pods
 *   An array of zero or more Communication Pod entities.
 *
 * @param array $pods_to_load
 *   An array of zero or more pods to return. If an empty array is passed,
 *   all known pods will be returned.
 *
 * @param array $conditions
 *   Entity load conditions. Not implemented.
 * @param bool $reset
 *   Set to TRUE to override any caching. This is useful when updating the
 *   theme hooks for this module.
 */
function fcl_fcuk_communication_pods_fcl_fcuk_communication_pods_load_multiple_alter(&$pods, $pods_to_load, $conditions, $reset) {
  foreach ($pods as $pod_machine_name => &$pod) {
    // Initialise the pod with its file paths.
    fcl_fcuk_communication_pods_initialise_pod($pod, $pod_machine_name);
  }

  // Sort pods by their weights, if there's more than one pod.
  if (count($pods) > 1) {
    $weights = [];

    foreach ($pods as $pod_machine_name => $pod) {
      $weights[$pod_machine_name] = $pod->weight;
    }

    array_multisort($weights, SORT_ASC, $pods);
  }
}

/**
 * Implements hook_entity_info().
 */
function fcl_fcuk_communication_pods_entity_info() {
  return [
    COMMUNICATION_POD_ENTITY_NAME => [
      'label' => t('Communication Pod'),
      'controller class' => COMMUNICATION_POD_ENTITY_CONTROLLER,
      'base table' => COMMUNICATION_POD_SCHEMA_NAME,
      'uri callback' => COMMUNICATION_POD_ENTITY_URI_CALLBACK,
      //'label callback' => COMMUNICATION_PODS_ENTITY_LABEL_CALLBACK,
      'fieldable' => TRUE,
      'entity keys' => [
        'id' => COMMUNICATION_POD_ID_FIELD,
        'label' => COMMUNICATION_POD_FRIENDLY_NAME,
        'language' => COMMUNICATION_POD_LANGUAGE_FIELD,
      ],
      'static cache' => TRUE,
      'bundles' => [
        COMMUNICATION_POD_BUNDLE_NAME => [
          'label' => 'Communication Pod',
          'admin' => [
            'path' => COMMUNICATION_POD_ADMIN_URL,
            'access arguments' => [COMMUNICATION_POD_PERM_ADMIN_OVERVIEW],
          ],
        ],
      ],
      'view modes' => [
        'full' => [
          'label' => t('Full Communication Pod'),
          'custom settings' => FALSE,
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_load().
 *
 * @param $entities
 * @param $type
 */
function fcl_fcuk_communication_pods_entity_load($entities, $type) {
  // When a Communication Pod entity is loaded, deserialise some of its data.
  if ($type == COMMUNICATION_POD_ENTITY_NAME) {
    foreach ($entities as &$pod) {
      fcl_fcuk_communication_pods_serialize_unserialize_values($pod, 'unserialize');
    }
  }
}

/**
 * Implements hook_fcl_fcuk_communication_pods_preprocess_pod_alter().
 *
 * @param array $variables
 */
function fcl_fcuk_communication_pods_fcl_fcuk_communication_pods_preprocess_pod_alter(&$variables) {
  // Attach this module's common CSS file to all pods.
  $variables['pod_external_css'][] = url(drupal_get_path('module', 'fcl_fcuk_communication_pods') . '/css/fcl_fcuk_communication_pods.css');

  // Set up a wrapper classes entry.
  $variables['wrapper_classes'] = '';

  // If the current user can edit the pod, add an edit link.
  if (fcl_fcuk_communication_pods_access(COMMUNICATION_POD_ACTION_UPDATE, $variables[COMMUNICATION_POD_ENTITY_NAME])) {
    $variables['classes_array'][] = 'can-edit';
    $variables['edit_link'] = l(
      t(fcl_fcuk_communication_pods_get_action(COMMUNICATION_POD_ACTION_UPDATE, $variables[COMMUNICATION_POD_ENTITY_NAME])),
      COMMUNICATION_POD_ADMIN_URL . '/' . COMMUNICATION_POD_ACTION_UPDATE . '/' . $variables[COMMUNICATION_POD_MACHINE_NAME],
      [
        'query' => [
          'destination' => $_GET['q'],
        ],
        'attributes' => [
          'class' => [
            'edit-link',
          ],
        ],
      ]);

    $variables['wrapper_classes'] .= ' can-edit';
  }

  // If the current user can delete the pod, add a delete link.
  if (fcl_fcuk_communication_pods_access(COMMUNICATION_POD_ACTION_DELETE, $variables[COMMUNICATION_POD_ENTITY_NAME])) {
    $variables['classes_array'][] = 'can-delete';
    $variables['delete_link'] = l(
      t(fcl_fcuk_communication_pods_get_action(COMMUNICATION_POD_ACTION_DELETE, $variables[COMMUNICATION_POD_ENTITY_NAME])),
      COMMUNICATION_POD_ADMIN_URL . '/' . COMMUNICATION_POD_ACTION_DELETE . '/' . $variables[COMMUNICATION_POD_MACHINE_NAME],
      [
        'query' => [
          'destination' => $_GET['q'],
        ],
        'attributes' => [
          'class' => [
            'delete-link',
          ],
        ],
      ]);

    $variables['wrapper_classes'] .= ' can-delete';
  }
}
